// Generated by CoffeeScript 1.8.0
define(['routes/testRoute', 'ehbs!templates/index'], function(TestRoute) {
  var app;
  return app = {
    start: function() {
      var App;
      App = Ember.Application.create();
      App.Router.map(function() {
        return this.route('test');
      });
      TestRoute.bind(App);
      App.IndexRoute = Ember.Route.extend({
        model: function() {
          return new Ember.RSVP.Promise(function(resolve, reject) {
            return new Ember.RSVP.hash({
              bots: Ember.$.getJSON('/bot/bots')
            }).then(function(result) {
              return resolve({
                question: null,
                uid: 'TEST-USER-001',
                display: '',
                bots: result.bots
              });
            }, function(errors) {
              return reject(errors);
            });
          });
        }
      });
      return App.IndexController = Ember.ObjectController.extend({
        actions: {
          update: function(message) {
            var display;
            display = this.get('display');
            display += message + '\r\n';
            this.set('display', display);
            return setTimeout(function() {
              return $('textarea').scrollTop($('textarea')[0].scrollHeight);
            }, 300);
          },
          talk: function() {
            var bot, question, thiz, uid;
            thiz = this;
            bot = this.get('bot');
            uid = this.get('uid');
            question = this.get('question');
            $.ajax({
              url: '/bot/talk',
              type: 'POST',
              data: JSON.stringify({
                bot: bot,
                uid: uid,
                query: question
              }),
              dataType: 'json',
              contentType: 'application/json; charset=utf-8'
            }).done(function(result) {
              var message;
              message = '[HUMAN] ' + question + '\r\n';
              message += '[BOT] ' + result.text;
              thiz.set('question', null);
              return thiz.send('update', message);
            }).fail(function(response) {
              return thiz.send('update', '[SYSTEM] ' + response.responseText);
            });
            return false;
          },
          compile: function() {
            var bot, thiz;
            thiz = this;
            bot = this.get('bot');
            $.ajax({
              url: '/bot/compile',
              type: 'POST',
              data: JSON.stringify({
                bot: bot
              }),
              dataType: 'json',
              contentType: 'application/json; charset=utf-8'
            }).done(function(result) {
              return thiz.send('update', '[SYSTEM] Grammar compilation done for bot ' + bot);
            }).fail(function(response) {
              return thiz.send('update', '[SYSTEM] Grammar compilation failed for bot ' + response.responseText);
            });
            return false;
          }
        }
      });
    }
  };
});
